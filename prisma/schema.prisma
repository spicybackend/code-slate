generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Organization {
  id          String                   @id @default(cuid())
  name        String
  slug        String                   @unique
  verified    Boolean                  @default(false)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  challenges  Challenge[]
  invitations OrganizationInvitation[]
  users       User[]

  @@index([slug])
}

model OrganizationInvitation {
  id             String       @id @default(cuid())
  email          String
  token          String       @unique
  role           UserRole     @default(ADMIN)
  expires        DateTime
  accepted       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@index([token])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime      @default(now())
  organizationId      String?
  password            String?
  role                UserRole      @default(ADMIN)
  updatedAt           DateTime      @updatedAt
  accounts            Account[]
  createdChallenges   Challenge[]   @relation("ChallengeCreator")
  comments            Comment[]
  sessions            Session[]
  reviewedSubmissions Submission[]  @relation("SubmissionReviewer")
  organization        Organization? @relation(fields: [organizationId], references: [id])

  @@index([email])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id             String          @id @default(cuid())
  title          String
  description    String
  instructions   String
  timeLimit      Int?
  status         ChallengeStatus @default(DRAFT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  creatorId      String
  candidates     Candidate[]
  creator        User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submissions    Submission[]

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
}

model Candidate {
  id          String       @id @default(cuid())
  name        String
  email       String
  phone       String?
  position    String?
  token       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  challengeId String
  challenge   Challenge    @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@unique([email, challengeId])
  @@index([token])
  @@index([challengeId])
}

model Submission {
  id             String           @id @default(cuid())
  content        String
  language       String           @default("jsx")
  status         SubmissionStatus @default(NOT_STARTED)
  startedAt      DateTime?
  submittedAt    DateTime?
  reviewedAt     DateTime?
  totalTimeSpent Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  challengeId    String
  candidateId    String
  reviewerId     String?
  comments       Comment[]
  events         KeystrokeEvent[]
  candidate      Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  challenge      Challenge        @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  reviewer       User?            @relation("SubmissionReviewer", fields: [reviewerId], references: [id])

  @@unique([challengeId, candidateId])
  @@index([status])
  @@index([challengeId])
  @@index([candidateId])
  @@index([reviewerId])
}

model KeystrokeEvent {
  id           String     @id @default(cuid())
  type         EventType
  timestamp    DateTime
  cursorStart  Int?
  cursorEnd    Int?
  content      String?
  windowFocus  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId, timestamp])
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  submissionId String
  authorId     String
  author       User       @relation(fields: [authorId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  REVIEWER
  HIRING_MANAGER
}

enum ChallengeStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum SubmissionStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum EventType {
  FOCUS_IN
  FOCUS_OUT
  CONTENT_SNAPSHOT
}
